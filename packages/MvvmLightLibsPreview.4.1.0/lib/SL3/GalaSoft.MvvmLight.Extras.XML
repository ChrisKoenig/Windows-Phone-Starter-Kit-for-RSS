<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Extras</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.Command.EventToCommand">
            <summary>
            This <see cref="T:System.Windows.Interactivity.TriggerAction"/> can be
            used to bind any event on any FrameworkElement to an <see cref="T:System.Windows.Input.ICommand"/>.
            Typically, this element is used in XAML to connect the attached element
            to a command located in a ViewModel. This trigger can only be attached
            to a FrameworkElement or a class deriving from FrameworkElement.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
            <summary>
            This <see cref="T:System.Windows.Interactivity.TriggerAction"/> can be
            used to bind any event on any FrameworkElement to an <see cref="T:System.Windows.Input.ICommand"/>.
            Typically, this element is used in XAML to connect the attached element
            to a command located in a ViewModel. This trigger can only be attached
            to a FrameworkElement or a class deriving from FrameworkElement.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke">
            <summary>
            Provides a simple way to invoke this trigger programatically
            without any EventArgs.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke(System.Object)">
            <summary>
            Executes the trigger.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
            <param name="parameter">The EventArgs of the fired event.</param>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter"/> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled"/> dependency property
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.#ctor">
            <summary>
            Initializes a new instance of the EventToCommand class.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnAttached">
            <summary>
            Called when this trigger is attached to a FrameworkElement.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnDetaching">
            <summary>
            Called when this trigger is detached from its associated object.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand">
            <summary>
            Gets or sets a value indicating whether the EventArgs passed to the
            event handler will be forwarded to the ICommand's Execute method
            when the event is fired (if the bound ICommand accepts an argument
            of type EventArgs).
            <para>For example, use a RelayCommand&lt;MouseEventArgs&gt; to get
            the arguments of a MouseMove event.</para>
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.Command">
            <summary>
            Gets or sets the ICommand that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/>
            attached to this trigger. This is a DependencyProperty. Because of limitations
            of Silverlight, you can only set databindings on this property. If you
            wish to use hard coded values, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue"/>
            property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/>
            attached to this trigger. This is NOT a DependencyProperty. Use this
            property if you want to set a hard coded value.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter"/> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. If this property
            is false, the element will not be disabled when the command's
            CanExecute method changes.
            If the attached element is not a <see cref="T:System.Windows.Controls.Control"/>, this property
            has no effect. 
            This is a DependencyProperty.
            Because of limitations of Silverlight, you can only set databindings 
            on this property. If you wish to use hard coded values, use 
            the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue"/> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledValue">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled.
            If the attached element is not a <see cref="T:System.Windows.Controls.Control"/>, this property
            has no effect. 
            This property is here for compatibility with the Silverlight version. 
            This is NOT a DependencyProperty.
            Use this property if you want to set a hard coded value.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled"/> property.
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Converters.UniversalConverter">
            <summary>
            Implements a universal converter able to take a lambda expression (as the parameter)
            and to run this expression dynamically at runtime to convert the value.
            Usage: Store an instance of UniversalConverter into the application's resources
            and use this instance in XAML, for example with:
            {Binding MyProperty,
                     Converter={StaticResource UniversalConverter},
                     ConverterParameter='b=>!b'}
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Converters.UniversalConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value into another using an expression (lambda) passed as a string
            and evaluated at runtime.
            The process is optimized and already created expression cached for further use.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="targetType">This parameter
            is not used.</param>
            <param name="parameter">The lambda expression to be evaluated at runtime,
            expressed as a string. For example expressions such as 'b=>!b' or
            'myValue=>myValue?Visibility.Visible:Visibility.Collapsed' (or more
            complex expressions) can be used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Converters.UniversalConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented.
            </summary>
            <param name="value">Unused parameter.</param>
            <param name="targetType">Unused parameter.</param>
            <param name="parameter">Unused parameter.</param>
            <param name="culture">Unused parameter.</param>
            <returns>This method is not implemented.</returns>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingListener">
            <summary>
            Helper class for adding Bindings to non-FrameworkElements
            </summary>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingListener.#ctor(System.Object,Expression.Samples.Interactivity.DataHelpers.BindingListener.ChangedHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="context">The context of the binding.</param>
            <param name="changedHandler">Callback whenever the value of this binding has changed.</param>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingListener.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Context">
            <summary>
            The context of the binding.
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Binding">
            <summary>
            The Binding which is to be evaluated
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Element">
            <summary>
            The element to be used as the context on which to evaluate the binding.
            </summary>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingListener.Value">
            <summary>
            The current value of this binding.
            </summary>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingListener.ChangedHandler">
            <summary>
            Delegate for when the binding listener has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs">
            <summary>
            Event args for when binding values change.
            </summary>
        </member>
        <member name="M:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs.#ctor(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Constructor
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Expression.Samples.Interactivity.DataHelpers.BindingChangedEventArgs.EventArgs">
            <summary>
            Original event args.
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.PreferredConstructorAttribute">
            <summary>
            When used with the SimpleIoc container, specifies which constructor
            should be used to instantiate when GetInstance is called.
            If there is only one constructor in the class, this attribute is
            not needed.
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.SimpleIoc">
            <summary>
            A very simple IOC container with basic functionality needed to register and resolve
            instances. If needed, this class can be replaced by another more elaborate
            IOC container implementing the IServiceLocator interface.
            The inspiration for this class is at https://gist.github.com/716137 but it has
            been extended with additional features.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Contains``1">
            <summary>
            Checks whether at least one instance of a given class is already created in the container.
            </summary>
            <typeparam name="TClass">The class that is queried.</typeparam>
            <returns>True if at least on instance of the class is already created, false otherwise.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Contains``1(System.String)">
            <summary>
            Checks whether the instance with the given key is already created for a given class
            in the container.
            </summary>
            <typeparam name="TClass">The class that is queried.</typeparam>
            <param name="key">The key that is queried.</param>
            <returns>True if the instance with the given key is already registered for the given class,
            false otherwise.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2">
            <summary>
            Registers a given type for a given interface.
            </summary>
            <typeparam name="TInterface">The interface for which instances will be resolved.</typeparam>
            <typeparam name="TClass">The type that must be used to create instances.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1">
            <summary>
            Registers a given type.
            </summary>
            <typeparam name="TClass">The type that must be used to create instances.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0})">
            <summary>
            Registers a given instance for a given type.
            </summary>
            <typeparam name="TClass">The type that is being registered.</typeparam>
            <param name="factory">The factory method able to create the instance that
            must be returned when the given type is resolved.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>
            Registers a given instance for a given type and a given key.
            </summary>
            <typeparam name="TClass">The type that is being registered.</typeparam>
            <param name="factory">The factory method able to create the instance that
            must be returned when the given type is resolved.</param>
            <param name="key">The key for which the given instance is registered.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Reset">
            <summary>
            Resets the instance in its original states. This deletes all the
            registrations.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1">
            <summary>
            Unregisters a class from the cache and removes all the previously
            created instances.
            </summary>
            <typeparam name="TClass">The class that must be removed.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(``0)">
            <summary>
            Removes the given instance from the cache. The class itself remains
            registered and can be used to create other instances.
            </summary>
            <typeparam name="TClass">The type of the instance to be removed.</typeparam>
            <param name="instance">The instance that must be removed.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(System.String)">
            <summary>
            Removes the instance corresponding to the given key from the cache. The class itself remains
            registered and can be used to create other instances.
            </summary>
            <typeparam name="TClass">The type of the instance to be removed.</typeparam>
            <param name="key">The key corresponding to the instance that must be removed.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or- 
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances(System.Type)">
            <summary>
            Provides a way to get all the instances of a given type available in the
            cache.
            </summary>
            <param name="serviceType">The class of which all instances
            must be returned.</param>
            <returns>All the instances of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances``1">
            <summary>
            Provides a way to get all the instances of a given type available in the
            cache.
            </summary>
            <typeparam name="TService">The class of which all instances
            must be returned.</typeparam>
            <returns>All the instances of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type)">
            <summary>
            Provides a way to get an instance of a given type. If no instance had been instantiated 
            before, a new instance will be created. If an instance had already
            been created, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <param name="serviceType">The class of which an instance
            must be returned.</param>
            <returns>An instance of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type,System.String)">
            <summary>
            Provides a way to get an instance of a given type corresponding
            to a given key. If no instance had been instantiated with this
            key before, a new instance will be created. If an instance had already
            been created with the same key, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <param name="serviceType">The class of which an instance must be returned.</param>
            <param name="key">The key uniquely identifying this instance.</param>
            <returns>An instance corresponding to the given type and key.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1">
            <summary>
            Provides a way to get an instance of a given type. If no instance had been instantiated 
            before, a new instance will be created. If an instance had already
            been created, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <typeparam name="TService">The class of which an instance
            must be returned.</typeparam>
            <returns>An instance of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1(System.String)">
            <summary>
            Provides a way to get an instance of a given type corresponding
            to a given key. If no instance had been instantiated with this
            key before, a new instance will be created. If an instance had already
            been created with the same key, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <typeparam name="TService">The class of which an instance must be returned.</typeparam>
            <param name="key">The key uniquely identifying this instance.</param>
            <returns>An instance corresponding to the given type and key.</returns>
        </member>
        <member name="P:GalaSoft.MvvmLight.Ioc.SimpleIoc.Default">
            <summary>
            This class' default instance.
            </summary>
        </member>
    </members>
</doc>
