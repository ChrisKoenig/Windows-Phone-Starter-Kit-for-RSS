<#@ include file="Enums.ttinclude" #>
<#@ include file="VmGen.ttinclude" #>

<#@ include file="CSharp\Messaging\UIMessage.ttinclude" #>
<#@ include file="CSharp\Messaging\UIMessageType.ttinclude" #>

<#@ include file="CSharp\View\XamlCodeBehind.ttinclude" #>
<#@ include file="CSharp\View\XamlPhone.ttinclude" #>
<#@ include file="CSharp\View\Xaml.ttinclude" #>

<#@ include file="CSharp\ViewModel\ViewModel.ttinclude" #>
<#@ include file="CSharp\ViewModel\ViewModelShim.ttinclude" #>
<#@ include file="CSharp\ViewModel\WireUp.ttinclude" #>
<#@ include file="CSharp\ViewModel\WireUpAutofac.ttinclude" #>
<#@ include file="CSharp\ViewModel\WireUpUnity.ttinclude" #>

<#@ include file="CSharp\BootstrapperUnity.ttinclude" #>
<#@ include file="CSharp\BootstrapperAutofac.ttinclude" #>

<#+
    // <copyright file="Config.tt" company="CompDJ">
    //  Copyright © CompDJ. All Rights Reserved.
    // </copyright>


    /// <summary>Static configuration class</summary>
    public static class Config
    {
        /// <summary>MVVMT4 version.</summary>
        public const string Version = "2.0.0.0";

        /// <summary>Gets or sets the Name property.</summary>
        public static string Name { get; set; }

        /// <summary>Gets or sets the CompanyName property.</summary>
        public static string CompanyName { get; set; }

        /// <summary>Gets or sets the BaseNamespace property.</summary>
        public static string BaseNamespace { get; set; }

        /// <summary>Gets or sets the MessagingNamespace property.</summary>
        public static string MessagingNamespace { get; set; }

        /// <summary>Gets or sets the ViewNamespace property.</summary>
        public static string ViewNamespace { get; set; }

        /// <summary>Gets or sets the ViewModelNamespace property.</summary>
        public static string ViewModelNamespace { get; set; }

        /// <summary>Gets or sets the ModelNamespace property.</summary>
        public static string ModelNamespace { get; set; }

        /// <summary>Gets or sets the ControlMode property.</summary>
        public static ControlMode ControlMode { get; set; }

        /// <summary>Gets or sets the Technology property.</summary>
        public static Technology Technology { get; set; }

        /// <summary>Gets or sets the Language property.</summary>
        public static Language Language { get; set; }

        /// <summary>Gets or sets the DiContainer property.</summary>
        public static DiContainer DiContainer { get; set; }

        /// <summary>Directory path to the T4 template.</summary>
        public static string TemplatePath
        {
            get
            {
                return System.IO.Path.GetDirectoryName(
                    System.IO.Path.GetDirectoryName(
                    System.IO.Path.GetDirectoryName(
                    TransformationContext.Host.TemplateFile)));
            }
        }

        /// <summary>
        /// Gets the requested namespace with the base namespace prepended.
        /// </summary>
        /// <param name="mode">View mode</param>
        public static string GetNamespace(ViewMode mode)
        {
            string retVal= "";
            
            if (!string.IsNullOrEmpty(Config.BaseNamespace))
            {
                retVal = Config.BaseNamespace+ ".";
            }

            if (mode == ViewMode.Messaging)
            {
                retVal += Config.MessagingNamespace;
            }
            else if (mode == ViewMode.ViewModel)
            {
                retVal += Config.ViewModelNamespace;
            }
            else if (mode == ViewMode.View)
            {
                retVal += Config.ViewNamespace;
            }
            if (mode == ViewMode.Model)
            {
                retVal += Config.ModelNamespace;
            }

            return retVal;
        }

        /// <summary>Gets the control mode in string form.</summary>
        public static string ControlString()
        {
            if (Config.ControlMode == ControlMode.Phone)
            {
                return "PhoneApplicationPage";
            }

            return Config.ControlMode.ToString();
        }

        /// <summary>Gets the language mode in string form.</summary>
        public static string LanguageString()
        {
            if (Config.Language == Language.CSharp)
            {
                return "C#";
            }

            return "vb";
        }

        /// <summary>Gets the langauge mode file extension in string form.</summary>
        public static string LanguageFileExtString()
        {
            if (Config.Language == Language.CSharp)
            {
                return ".cs";
            }

            return ".vb";
        }
    }
#>
