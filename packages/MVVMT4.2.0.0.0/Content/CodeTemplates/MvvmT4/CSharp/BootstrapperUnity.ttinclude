<#+
    // <copyright file="Bootstrapper.tt" company="CompDJ">
    //  Copyright © CompDJ. All Rights Reserved.
    // </copyright>

    public class BootstrapperUnity : Template
    {
        public override string TransformText()
        {
#>
// -----------------------------------------------------------------------
// <copyright file="Bootstrapper<#=Config.LanguageFileExtString()#>" company="<#=Config.CompanyName#>">
//     Copyright (c) <#=Config.CompanyName#>. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MVVMT4 v<#=Config.Version#>. 
//     http://mvvmt4.codeplex.com/
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     NOTE: This code will probably not work unless it's moved out of the 
//           generated folder.
// </auto-generated>
// -----------------------------------------------------------------------------

//------------------------------------------------------------------------------
// In the app.xaml<#=Config.LanguageFileExtString()#> file, in the OnStartup(StartupEventArgs e) method,
// you need the following code:
// 
// DispatcherHelper.Initialize();
// Bootstrapper bootstrapper = new Bootstrapper();
// bootstrapper.Run();
//------------------------------------------------------------------------------


namespace <#=Config.BaseNamespace#>
{
    using System.Windows;
    using Microsoft.Practices.Prism.UnityExtensions;
    using Microsoft.Practices.ServiceLocation;
    using Microsoft.Practices.Unity;

    /// <summary>
    /// Initializes Prism to start this application to use Unity.
    /// </summary>
    public class Bootstrapper : UnityBootstrapper
    {
        /// <summary>DI container.</summary>
        private static IUnityContainer container = null;

        /// <summary>Resolves a type.</summary>
        /// <typeparam name="T">Type to resolve</typeparam>
        /// <returns>Returns an instance of the type</returns>
        public static T Resolve<T>()
        {
            return container.Resolve<T>();
        }

		/// <summary>
        /// Gets the shell of the application.
        /// </summary>
        /// <returns>Returns a dependency object</returns>
        protected override System.Windows.DependencyObject CreateShell()
        {
            //// Enter the name of the view you wish to have as your main window.
            return container.Resolve<View.ShellView>();
        }

        /// <summary>
        /// Initializes the shell of the application.
        /// </summary>
        protected override void InitializeShell()
        {
            base.InitializeShell();

            //// Enter the name of the view you wish to have as your main window.
#if SILVERLIGHT
            Application.Current.RootVisual = (View.ShellView)this.Shell;            
#else
            Application.Current.MainWindow = (View.ShellView)this.Shell;
            Application.Current.MainWindow.Show();
#endif
        }

        /// <summary>
        /// Initializes the container for the application.
        /// </summary>
        protected override void ConfigureContainer()
        {
            base.ConfigureContainer();

            //// Example for registering your view models.
			//// builder.RegisterType<ViewModel.AppShellViewModel>();
            if (GalaSoft.MvvmLight.ViewModelBase.IsInDesignModeStatic)
            {
                //// Register design-time view models
            }
            else
            {
                //// Register run-time view models
            }

            container = this.Container;
        }
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
