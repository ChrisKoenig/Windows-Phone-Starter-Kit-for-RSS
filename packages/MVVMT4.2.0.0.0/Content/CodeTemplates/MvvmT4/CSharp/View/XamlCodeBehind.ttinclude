<#+
    // <copyright file="XamlCodeBehind.tt" company="CompDJ">
    //  Copyright © CompDJ. All Rights Reserved.
    // </copyright>

    public class XamlCodeBehind : Template
    {
        public override string TransformText()
        {
#>
// -----------------------------------------------------------------------
// <copyright file="<#=Config.Name#>View.xaml.cs" company="<#=Config.CompanyName#>">
//     Copyright (c) <#=Config.CompanyName#>. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MVVMT4 v<#=Config.Version#>. 
//     http://mvvmt4.codeplex.com/
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     NOTE: This code will probably not work unless it's moved out of the 
//           generated folder.
// </auto-generated>
// -----------------------------------------------------------------------------

namespace <#=Config.GetNamespace(ViewMode.View)#>
{
    using System.Windows;
    using System.Windows.Controls;
    using GalaSoft.MvvmLight.Messaging;
    using GalaSoft.MvvmLight.Threading;	
<#+ if (Config.ControlMode == ControlMode.Window) { #>
    using <#=Config.BaseNamespace#>.Messaging;
<#+ } #>
    using <#=Config.GetNamespace(ViewMode.ViewModel)#>;

    /// <summary>
    /// <#=Config.Name#> view for the <#=Config.Name#> view model.
    /// </summary>
    public partial class <#=Config.Name#>View : <#=Config.ControlString()#>
    {
        /// <summary>
        /// Initializes a new instance of the <#=Config.Name#>View class.
        /// </summary>
        public <#=Config.Name#>View()
        {
            InitializeComponent();
<#+ if (Config.ControlMode == ControlMode.Window | Config.ControlMode == ControlMode.Phone) { #>
            // Registers to recieve UI Messages
            Messenger.Default.Register<UIMessage>(this, new System.Action<UIMessage>(this.UIMessageHandler));
<#+ } #>
        }

<#+ if (Config.ControlMode == ControlMode.Window | Config.ControlMode == ControlMode.Phone) { #>
        /// <summary>
        /// Handles the navigation and close messages sent from view models or commands
        /// </summary>
        /// <param name="sender">User interface message</param>
        private void UIMessageHandler(UIMessage sender)
        {
            if (sender.WindowName == <#=Config.Name#>ViewModel.WindowName)
            {
                if (sender.MessageType == UIMessageType.Close)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => {this.Close();});
                }
                else if (sender.MessageType == UIMessageType.MaximizeToggle)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => 
                    {
                        if (this.WindowState == System.Windows.WindowState.Maximized)
                        {
                            this.WindowState = System.Windows.WindowState.Normal;
                        }
                        else
                        {
                            this.WindowState = System.Windows.WindowState.Maximized;
                        }
                    });
                }
                else if (sender.MessageType == UIMessageType.Maximize)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => { this.WindowState = System.Windows.WindowState.Maximized; });
                }
                else if (sender.MessageType == UIMessageType.Minimize)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => { this.WindowState = System.Windows.WindowState.Minimized; });
                }
                else if (sender.MessageType == UIMessageType.Restore)
                {
                    DispatcherHelper.CheckBeginInvokeOnUI(() => { this.WindowState = System.Windows.WindowState.Normal; });
                }
                else if (sender.MessageType == UIMessageType.Navigate)
                {
                    if (string.IsNullOrEmpty(sender.NavigateUri))
                    {
                        //// Navigate to sender.Target object
                    }
                    else
                    {
                        //// Navigate to sender.NavigateUI
                    }
                }
            }
        }
<#+ } #>
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
