<#+
    // <copyright file="ViewModelShim.tt" company="CompDJ">
    //  Copyright © CompDJ. All Rights Reserved.
    // </copyright>

    public class ViewModelShim : Template
    {
        public override string TransformText()
        {
#>
// -----------------------------------------------------------------------
// <copyright file="<#=Config.Name#>ViewModel<#=Config.LanguageFileExtString()#>" company="<#=Config.CompanyName#>">
//     Copyright (c) <#=Config.CompanyName#>. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MVVMT4 v<#=Config.Version#>. 
//     http://mvvmt4.codeplex.com/
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     NOTE: This code will probably not work unless it's moved out of the 
//           generated folder.
// </auto-generated>
// -----------------------------------------------------------------------------

namespace <#=Config.GetNamespace(ViewMode.ViewModel)#>
{
    using GalaSoft.MvvmLight;

    /// <summary>
    /// This holds the one method used for the properties to raise
    /// the property changed event
    /// </summary>
    public class ViewModelShim : ViewModelBase
    {
        /// <summary>
        /// Sets the notify property on the model base easily
        /// </summary>
        /// <typeparam name="T">Type of property</typeparam>
        /// <param name="propertyName">Property name</param>
        /// <param name="field">Backing field</param>
        /// <param name="value">Value to set</param>
        protected void SetNotifyingProperty<T>(string propertyName, ref T field, T value)
        {
            if (value == null)
            {
                field = value;
                RaisePropertyChanged(propertyName);
                return;
            }

            if (value.Equals(field))
            {
                return;
            }

            field = value;
            RaisePropertyChanged(propertyName);
        }
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
