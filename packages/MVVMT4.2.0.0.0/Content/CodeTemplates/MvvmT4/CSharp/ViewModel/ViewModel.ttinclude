<#+
    // <copyright file="viewmodel.tt" company="CompDJ">
    //  Copyright © CompDJ. All Rights Reserved.
    // </copyright>

    public class ViewModel : Template
    {
        public override string TransformText()
        {
#>
// -----------------------------------------------------------------------
// <copyright file="<#=Config.Name#>ViewModel<#=Config.LanguageFileExtString()#>" company="<#=Config.CompanyName#>">
//     Copyright (c) <#=Config.CompanyName#>. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MVVMT4 v<#=Config.Version#>. 
//     http://mvvmt4.codeplex.com/
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     NOTE: This code will probably not work unless it's moved out of the 
//           generated folder.
// </auto-generated>
// -----------------------------------------------------------------------------

namespace <#=Config.GetNamespace(ViewMode.ViewModel)#>
{
    using GalaSoft.MvvmLight;
    using GalaSoft.MvvmLight.Command;
    using GalaSoft.MvvmLight.Messaging;

    /// <summary>
    /// This class contains properties that the <#=Config.Name#> View can data bind to.
    /// <para>
    /// Use the <strong>mvvminpc</strong> snippet to add bindable properties to this ViewModel.
    /// </para>
    /// <para>
    /// You can also use Blend to data bind with the tool's support.
    /// </para>
    /// <para>
    /// See http://www.galasoft.ch/mvvm/getstarted
    /// </para>
    /// </summary>
    public class <#=Config.Name#>ViewModel : ViewModelShim
    {
        /// <summary>Window name</summary>
        /// <remarks>This can be the main window of the application.</remarks>
        public const string WindowName = "<#=Config.Name#>";

        /// <summary>
        /// Initializes a new instance of the <#=Config.Name#>ViewModel class.
        /// </summary>
        public <#=Config.Name#>ViewModel()
        {
            if (IsInDesignMode)
            {
                //// Code runs in Blend --> create design time data.
            }
            else
            {
                //// Code runs "for real"
<#+ if (Config.ControlMode == ControlMode.Window) { #>
                this.CloseCommand = new RelayCommand(new System.Action(this.CloseCommandExecute), new System.Func<bool>(this.CloseCommandCanExecute));
<#+ } #>
                this.NavigateCommand = new RelayCommand<string>(new System.Action<string>(this.NavigateCommandExecute), this.NavigateCommandCanExecute);
            }
        }
		
		//// Here is an example property using the SetNotifyingProperty<T> method of ViewModelShim.
		
        /// <summary>Gets or sets the Title property</summary>
        public string Title
        {
            get { return this.fieldTitle; }
            set { SetNotifyingProperty<string>("Title", ref this.fieldTitle, value); }
        }

        /// <summary>Title backing field</summary>
        private string fieldTitle;
		
		/// <summary>
        /// Cleanup if needed.
        /// </summary>
        public override void Cleanup()
        {
            base.Cleanup();
        }

<#+ if (Config.ControlMode == ControlMode.Window) { #>
        #region CloseCommand

        /// <summary>
        /// Gets or sets the Close command.
        /// </summary>
        public RelayCommand CloseCommand { get; set; }

        /// <summary>
        /// Executes the Close command.
        /// </summary>
        private void CloseCommandExecute()
        {
            <#=Config.GetNamespace(ViewMode.Messaging)#>.UIMessage.SendMessage(<#=Config.GetNamespace(ViewMode.Messaging)#>.UIMessageType.Close, <#=Config.Name#>ViewModel.WindowName);
        }

        /// <summary>
        /// Determines if the Close command can execute.
        /// </summary>
        /// <returns>A value indicating if the command can execute</returns>
        private bool CloseCommandCanExecute()
        {
            return true;
        }

        #endregion

<#+ } #>
        #region NavigateCommand

        /// <summary>
        /// Gets or sets the Navigate command.
        /// </summary>
        public RelayCommand<string> NavigateCommand { get; set; }

        /// <summary>
        /// Executes the Navigate command.
        /// </summary>
        private void NavigateCommandExecute(string uri)
        {
            <#=Config.GetNamespace(ViewMode.Messaging)#>.UIMessage.SendMessage(<#=Config.GetNamespace(ViewMode.Messaging)#>.UIMessageType.Navigate, <#=Config.Name#>ViewModel.WindowName, uri);
        }

        /// <summary>
        /// Determines if the Navigate command can execute.
        /// </summary>
        /// <returns>A value indicating if the command can execute</returns>
        private bool NavigateCommandCanExecute(string uri)
        {
            return true;
        }

        #endregion
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
