<#+
    // <copyright file="Bootstrapper.tt" company="CompDJ">
    //  Copyright © CompDJ. All Rights Reserved.
    // </copyright>

    public class BootstrapperAutofac : Template
    {
        public override string TransformText()
        {
#>
// -----------------------------------------------------------------------
// <copyright file="Bootstrapper<#=Config.LanguageFileExtString()#>" company="<#=Config.CompanyName#>">
//     Copyright (c) <#=Config.CompanyName#>. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MVVMT4 v<#=Config.Version#>. 
//     http://mvvmt4.codeplex.com/
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     NOTE: This code will probably not work unless it's moved out of the 
//           generated folder.
// </auto-generated>
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// In your app.xaml or wherever you want to keep it, add the following:
// 
//      xmlns:shell="clr-namespace:<#=Config.BaseNamespace#>"
//      <shell:Bootstrapper x:Key="Locator" d:IsDataSource="true" />
// -----------------------------------------------------------------------------

namespace <#=Config.BaseNamespace#>
{
    using System;
    using System.Collections.Generic;
    using Autofac;

    /// <summary>Autofac Boot Strapper class.</summary>
    public static class Bootstrapper
    {
        /// <summary>IOC container.</summary>
        private static readonly IContainer container;

        /// <summary>Initializes static members of the Bootstrapper class.</summary>
        static Bootstrapper()
        {
            var builder = ConfigureContainer();

            container = builder.Build(Autofac.Builder.ContainerBuildOptions.Default);
        }

        /// <summary>Resolves a type.</summary>
        /// <typeparam name="T">Type to resolve</typeparam>
        /// <returns>Returns an instance of the type</returns>
        public static T Resolve<T>()
        {
            return container.Resolve<T>();
        }

        /// <summary>Resolves a type.</summary>
        /// <typeparam name="T">Type to resolve</typeparam>
        /// <param name="parameters">Parameters for object construction</param>
        /// <returns>Returns an instance of the type</returns>
        public static T Resolve<T>(Autofac.Core.Parameter[] parameters)
        {
            return container.Resolve<T>(parameters);
        }

        /// <summary>Resolves a type.</summary>
        /// <typeparam name="T">Type to resolve</typeparam>
        /// <param name="parameters">Parameters for object construction</param>
        /// <returns>Returns an instance of the type</returns>
        public static T Resolve<T>(IEnumerable<Autofac.Core.Parameter> parameters)
        {
            return container.Resolve<T>(parameters);
        }

        /// <summary>Creates the builder and registers the types for the application.</summary>
        /// <returns>Returns an instance of the container builder</returns>
        private static ContainerBuilder ConfigureContainer()
        {
            var builder = new ContainerBuilder();

            //// Example for registering your view models.
			//// builder.RegisterType<ViewModel.AppShellViewModel>();
            if (GalaSoft.MvvmLight.ViewModelBase.IsInDesignModeStatic)
            {
                //// Register design-time view models
            }
            else
            {
                //// Register run-time view models
            }

            return builder;
        }
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
