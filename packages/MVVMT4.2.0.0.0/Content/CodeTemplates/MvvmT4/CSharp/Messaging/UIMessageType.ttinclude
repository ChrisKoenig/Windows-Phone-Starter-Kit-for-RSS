<#+
    // <copyright file="UIMessageType.tt" company="CompDJ">
    //  Copyright © CompDJ. All Rights Reserved.
    // </copyright>

    public class UIMessageType : Template
    {
        public override string TransformText()
        {
#>
// -----------------------------------------------------------------------
// <copyright file="UIMessage<#=Config.LanguageFileExtString()#>" company="<#=Config.CompanyName#>">
//     Copyright (c) <#=Config.CompanyName#>. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//============================================================================
// <auto-generated>
//     This code was generated by MVVMT4 v<#=Config.Version#>. 
//     http://mvvmt4.codeplex.com/
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     NOTE: This code will probably not work unless it's moved out of the 
//           generated folder.
// </auto-generated>
//============================================================================

namespace <#=Config.GetNamespace(ViewMode.Messaging)#>
{
    using System;
    using GalaSoft.MvvmLight.Messaging;

    /// <summary>User interface message.</summary>
    public class UIMessage : MessageBase
    {
        /// <summary>Initializes a new instance of the UIMessage class.</summary>
        public UIMessage()
        {
        }

        /// <summary>Initializes a new instance of the UIMessage class.</summary>
        /// <param name="messageType">Message type to pass</param>
        /// <param name="windowName">Window name to message to</param>
        public UIMessage(UIMessageType messageType, string windowName)
        {
            this.MessageType = messageType;
            this.WindowName = windowName;
        }

        /// <summary>Initializes a new instance of the UIMessage class.</summary>
        /// <param name="messageType">Message type to pass</param>
        /// <param name="windowName">Window name to message to</param>
        /// <param name="navigateUri">Navigate to this Uri</param>
        public UIMessage(UIMessageType messageType, string windowName, string navigateUri)
        {
            this.MessageType = messageType;
            this.WindowName = windowName;
            this.NavigateUri = navigateUri;
        }

        /// <summary>Gets or sets the MessageType property.</summary>
        public UIMessageType MessageType { get; set; }

        /// <summary>Gets or sets the NavigateUri property.</summary>
        public string NavigateUri { get; set; }

        /// <summary>Gets or sets the WindowName property.</summary>
        public string WindowName { get; set; }

        /// <summary>Sends a message to the specified window.</summary>
        /// <param name="messageType">Message type to pass</param>
        /// <param name="windowName">Window name to message to</param>
        public static void SendMessage(UIMessageType messageType, string windowName)
        {
            SendMessage(messageType, windowName, string.Empty);
        }

        /// <summary>Sends a message to the specified window.</summary>
        /// <param name="messageType">Message type to pass</param>
        /// <param name="windowName">Window name to message to</param>
        /// <param name="navigateUri">Navigate to this Uri</param>
        public static void SendMessage(UIMessageType messageType, string windowName, string navigateUri)
        {
            var msg = new UIMessage(messageType, windowName, navigateUri);
            Messenger.Default.Send<UIMessage>(msg);
        }
    }
}
<#+
                 return this.GenerationEnvironment.ToString();
        }
    }
#>
