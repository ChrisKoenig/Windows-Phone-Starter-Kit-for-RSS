<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Extras.WP71</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.Ioc.SimpleIoc">
            <summary>
            A very simple IOC container with basic functionality needed to register and resolve
            instances. If needed, this class can be replaced by another more elaborate
            IOC container implementing the IServiceLocator interface.
            The inspiration for this class is at https://gist.github.com/716137 but it has
            been extended with additional features.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Contains``1">
            <summary>
            Checks whether at least one instance of a given class is already created in the container.
            </summary>
            <typeparam name="TClass">The class that is queried.</typeparam>
            <returns>True if at least on instance of the class is already created, false otherwise.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Contains``1(System.String)">
            <summary>
            Checks whether the instance with the given key is already created for a given class
            in the container.
            </summary>
            <typeparam name="TClass">The class that is queried.</typeparam>
            <param name="key">The key that is queried.</param>
            <returns>True if the instance with the given key is already registered for the given class,
            false otherwise.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2">
            <summary>
            Registers a given type for a given interface.
            </summary>
            <typeparam name="TInterface">The interface for which instances will be resolved.</typeparam>
            <typeparam name="TClass">The type that must be used to create instances.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1">
            <summary>
            Registers a given type.
            </summary>
            <typeparam name="TClass">The type that must be used to create instances.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0})">
            <summary>
            Registers a given instance for a given type.
            </summary>
            <typeparam name="TClass">The type that is being registered.</typeparam>
            <param name="factory">The factory method able to create the instance that
            must be returned when the given type is resolved.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>
            Registers a given instance for a given type and a given key.
            </summary>
            <typeparam name="TClass">The type that is being registered.</typeparam>
            <param name="factory">The factory method able to create the instance that
            must be returned when the given type is resolved.</param>
            <param name="key">The key for which the given instance is registered.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Reset">
            <summary>
            Resets the instance in its original states. This deletes all the
            registrations.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1">
            <summary>
            Unregisters a class from the cache and removes all the previously
            created instances.
            </summary>
            <typeparam name="TClass">The class that must be removed.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(``0)">
            <summary>
            Removes the given instance from the cache. The class itself remains
            registered and can be used to create other instances.
            </summary>
            <typeparam name="TClass">The type of the instance to be removed.</typeparam>
            <param name="instance">The instance that must be removed.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(System.String)">
            <summary>
            Removes the instance corresponding to the given key from the cache. The class itself remains
            registered and can be used to create other instances.
            </summary>
            <typeparam name="TClass">The type of the instance to be removed.</typeparam>
            <param name="key">The key corresponding to the instance that must be removed.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or- 
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances(System.Type)">
            <summary>
            Provides a way to get all the instances of a given type available in the
            cache.
            </summary>
            <param name="serviceType">The class of which all instances
            must be returned.</param>
            <returns>All the instances of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances``1">
            <summary>
            Provides a way to get all the instances of a given type available in the
            cache.
            </summary>
            <typeparam name="TService">The class of which all instances
            must be returned.</typeparam>
            <returns>All the instances of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type)">
            <summary>
            Provides a way to get an instance of a given type. If no instance had been instantiated 
            before, a new instance will be created. If an instance had already
            been created, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <param name="serviceType">The class of which an instance
            must be returned.</param>
            <returns>An instance of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type,System.String)">
            <summary>
            Provides a way to get an instance of a given type corresponding
            to a given key. If no instance had been instantiated with this
            key before, a new instance will be created. If an instance had already
            been created with the same key, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <param name="serviceType">The class of which an instance must be returned.</param>
            <param name="key">The key uniquely identifying this instance.</param>
            <returns>An instance corresponding to the given type and key.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1">
            <summary>
            Provides a way to get an instance of a given type. If no instance had been instantiated 
            before, a new instance will be created. If an instance had already
            been created, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <typeparam name="TService">The class of which an instance
            must be returned.</typeparam>
            <returns>An instance of the given type.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1(System.String)">
            <summary>
            Provides a way to get an instance of a given type corresponding
            to a given key. If no instance had been instantiated with this
            key before, a new instance will be created. If an instance had already
            been created with the same key, that same instance will be returned.
            <remarks>If the class has not been registered before, this method
            returns null!</remarks>
            </summary>
            <typeparam name="TService">The class of which an instance must be returned.</typeparam>
            <param name="key">The key uniquely identifying this instance.</param>
            <returns>An instance corresponding to the given type and key.</returns>
        </member>
        <member name="P:GalaSoft.MvvmLight.Ioc.SimpleIoc.Default">
            <summary>
            This class' default instance.
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.PreferredConstructorAttribute">
            <summary>
            When used with the SimpleIoc container, specifies which constructor
            should be used to instantiate when GetInstance is called.
            If there is only one constructor in the class, this attribute is
            not needed.
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Threading.DispatcherHelper">
            <summary>
            Helper class for dispatcher operations on the UI thread.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.CheckBeginInvokeOnUI(System.Action)">
            <summary>
            Executes an action on the UI thread. If this method is called
            from the UI thread, the action is executed immendiately. If the
            method is called from another thread, the action will be enqueued
            on the UI thread's dispatcher and executed asynchronously.
            <para>For additional operations on the UI thread, you can get a
            reference to the UI thread's dispatcher thanks to the property
            <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher"/></para>.
            </summary>
            <param name="action">The action that will be executed on the UI
            thread.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize">
            <summary>
            This method should be called once on the UI thread to ensure that
            the <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher"/> property is initialized.
            <para>In a Silverlight application, call this method in the
            Application_Startup event handler, after the MainPage is constructed.</para>
            <para>In WPF, call this method on the static App() constructor.</para>
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher">
            <summary>
            Gets a reference to the UI thread's dispatcher, after the
            <see cref="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize"/> method has been called on the UI thread.
            </summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.EventToCommand">
            <summary>
            This <see cref="T:System.Windows.Interactivity.TriggerAction"/> can be
            used to bind any event on any FrameworkElement to an <see cref="T:System.Windows.Input.ICommand"/>.
            Typically, this element is used in XAML to connect the attached element
            to a command located in a ViewModel. This trigger can only be attached
            to a FrameworkElement or a class deriving from FrameworkElement.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter"/> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled"/> dependency property
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnAttached">
            <summary>
            Called when this trigger is attached to a FrameworkElement.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.GetCommand">
            <summary>
            This method is here for compatibility
            with the Silverlight 3 version.
            </summary>
            <returns>The command that must be executed when
            this trigger is invoked.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke">
            <summary>
            Provides a simple way to invoke this trigger programatically
            without any EventArgs.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke(System.Object)">
            <summary>
            Executes the trigger.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
            <param name="parameter">The EventArgs of the fired event.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.Command">
            <summary>
            Gets or sets the ICommand that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/>
            attached to this trigger. This is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/>
            attached to this trigger. This property is here for compatibility
            with the Silverlight version. This is NOT a DependencyProperty.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter"/> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. If this property
            is false, the element will not be disabled when the command's
            CanExecute method changes. This is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledValue">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command"/> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. This property is here for
            compatibility with the Silverlight version. This is NOT a DependencyProperty.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled"/> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand">
            <summary>
            Specifies whether the EventArgs of the event that triggered this
            action should be passed to the bound RelayCommand. If this is true,
            the command should accept arguments of the corresponding
            type (for example RelayCommand&lt;MouseButtonEventArgs&gt;).
            </summary>
        </member>
    </members>
</doc>
